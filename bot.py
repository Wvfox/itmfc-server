import os

from dotenv import load_dotenv
from telethon import TelegramClient, events
import logging
import json
import requests

load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
api_id = int(os.environ.get("TG_BOT_API_ID"))
api_hash = os.environ.get("TG_BOT_API_HASH")
bot_token = os.environ.get("TG_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å–µ—Å—Å–∏–∏
client = TelegramClient('session_name', api_id, api_hash)  

# –•—Ä–∞–Ω–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
subscribed_users = set()

# –•—Ä–∞–Ω–∏–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
known_members = set()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
json_file_path = 'new_members.json'

# URL API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
api_url = os.environ.get("TG_BOT_SERVER_API_CREATE_URL")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ API
def send_to_api(data):
    try:
        response = requests.post(api_url, json=data)
        if response.status_code == 200:
            logging.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ API.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ API: {response.status_code}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ API: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ JSON —Ñ–∞–π–ª
def update_json(data):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
        try:
            with open(json_file_path, 'r', encoding='utf-8') as f:
                members = json.load(f)
        except FileNotFoundError:
            members = []

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        members.append(data)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        with open(json_file_path, 'w', encoding='utf-8') as f:
            json.dump(members, f, ensure_ascii=False, indent=4)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ API
        send_to_api(data)

        logging.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {json_file_path} –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ API.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
async def notify_new_member(new_member_id, chat_id, action_type):
    user = await client.get_entity(new_member_id)
    print()
    user_info = (
        f"üîπ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!\n\n"
        f"üë§ –ò–º—è: {user.first_name}\n"
        f"üë§ –§–∞–º–∏–ª–∏—è: {user.last_name if user.last_name else '–ù–µ—Ç'}\n"
        f"üÜî ID: {user.id}\n"
        f"üíæ –¢—ç–≥: @{user.username if user.username else '–ù–µ—Ç'}"
    )
    
    if action_type == "added":
        logging.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user_info}")
    elif action_type == "left":
        user_info = f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É:\n\n{user_info}"
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É: {user_info}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º JSON —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data = {
        'first_name': user.first_name,
        'last_name': user.last_name if user.last_name else '–ù–µ—Ç',
        'user_tag': f'@{user.username}' if user.username else '–ù–µ—Ç',
        'user_id': user.id,
        'group_id': chat_id
    }
    update_json(user_data)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in subscribed_users:
        try:
            await client.send_message(user_id, user_info)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
@client.on(events.ChatAction)
async def chat_action(event):
    if event.user_added:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
        new_member_id = event.user_id
        chat_id = event.chat_id
        
        if new_member_id not in known_members:
            # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–æ–≤—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            await notify_new_member(new_member_id, chat_id, "added")

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
            known_members.add(new_member_id)
    
    elif event.user_left:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É
        user_left_id = event.user_id
        chat_id = event.chat_id
        await notify_new_member(user_left_id, chat_id, "left")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É
        if user_left_id in known_members:
            known_members.remove(user_left_id)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@client.on(events.NewMessage(pattern='/start'))
async def start(message):
    user_id = message.sender_id
    if user_id not in subscribed_users:
        subscribed_users.add(user_id)
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö!")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    else:
        await message.reply("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")


async def get_group_id(group_name):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –ø–æ –∏–º–µ–Ω–∏
    entity = await client.get_entity(group_name)
    # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã
    print(f"ID –≥—Ä—É–ø–ø—ã {group_name}: {entity.id}")


# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
async def main():
    await client.start(bot_token=bot_token) 
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await client.run_until_disconnected()


client.loop.run_until_complete(main())
